{"version":3,"sources":["app.ts"],"names":[],"mappings":"AAAA;AACA;;AAoLA,SAAS,GAAG,CAAC,CAAS,EAAE,CAAS,EAAA;EAC/B,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;IAClD,OAAO,CAAC,CAAC,QAAQ,CAAA,CAAE,GAAG,CAAC,CAAC,QAAQ,CAAA,CAAE;EACpC;EACA,OAAO,CAAC,GAAG,CAAC;AACd;AAEA,IAAI,MAAM,GAAG,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;AAExB;AAEA,IAAI,MAAM,GAAG;EACX,IAAI,EAAE,MAAM;EACZ,GAAG,EAAE;IACH,KAAK,EAAE;;CAEV;AAED,IAAI,OAAO,GAAG;EACV,IAAI,EAAE;EACN;EACA;EACA;CACD;AAEF,OAAO,CAAC,GAAG,CAAE,CAAA,EAAA,GAAA,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,GAAG,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,CAAC;AAGjC;AACD;AAEA,IAAI,QAAQ,GAAE,IAAI;AAElB,IAAI,UAAU,GAAE,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAR,QAAQ,GAAI,UAAU;AAEtC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC","file":"app.c61986b1.js","sourceRoot":"..","sourcesContent":["// Intersection type\r\n//combine different types to come up with a new type\r\n\r\n// type User={\r\n//     name:string\r\n//     age:number\r\n// }\r\n// type Manager={\r\n// manages:string[]\r\n// role:string[]\r\n// }\r\n\r\n// type Admin = User & Manager\r\n\r\n// let admin:Admin={\r\n//     name:\"John\",\r\n//     age:20,\r\n//     manages:['jane', 'Doe'],\r\n//     role:['managing']\r\n// }\r\n//intersection for objects adds all the properties together\r\n\r\n//intersection for built in types takes the common type\r\n\r\n// type StrNum= string | number\r\n// type StrBool= string |boolean\r\n\r\n// type combined= StrBool & StrNum //string\r\n\r\n// Type Guards\r\n// Typeof -- check the type\r\n// this only works for built in datatypes\r\n// function add(a:StrNum, b:StrNum){\r\n//     if(typeof a==='string' || typeof b==='string'){\r\n//         return a.toString() + b.toString()\r\n//     }\r\n//     return a+b\r\n// }\r\n\r\n// console.log(add('Hello ', 'World'));\r\n\r\n// console.log(add(12,45));\r\n\r\n// type User = {\r\n//   name: string;\r\n//   age: number;\r\n// };\r\n// type Manager = {\r\n//   name: string;\r\n//   manages: string[];\r\n//   role: string[];\r\n// };\r\n\r\n// type Employee = User | Manager;\r\n//create a function that says if someone is a manager or a normal user\r\n\r\n// in operator\r\n// function printEmployee(emp: Employee) {\r\n//     //we cant use Typeof - they are not built in types\r\n//     if('manages' in emp){\r\n//         // this is a manager\r\n//         console.log(\"You are a Manager\");\r\n//         return\r\n//     }\r\n//     console.log(\"You are a Normal user\");\r\n//     return\r\n// }\r\n\r\n// printEmployee({name:\"John\", manages:[''],role:[]})\r\n\r\n// class Car{\r\n//     drive(){\r\n//         console.log('Driving');\r\n\r\n//     }\r\n// }\r\n\r\n// class Truck{\r\n//     drive(){\r\n//         console.log('Driving');\r\n\r\n//     }\r\n//     loadCargo(){\r\n//         console.log(\"Carrying 1T cargo..\");\r\n\r\n//     }\r\n// }\r\n\r\n// type Vehicle= Car |Truck\r\n\r\n// // Instance of\r\n// //used with classes\r\n\r\n// function checkVehicle(vehicle:Vehicle){\r\n\r\n//     vehicle.drive()\r\n\r\n//     if (vehicle instanceof Truck){// there might be  a typo\r\n//         vehicle.loadCargo()\r\n//     }\r\n// }\r\n\r\n// checkVehicle(new Truck())\r\n\r\n// type User = {\r\n//     name: string;\r\n//     age: number;\r\n//     role:'User'\r\n//   };\r\n//   type Manager = {\r\n//     name: string;\r\n//     manages: string[];\r\n//     role: 'Admin';\r\n//   };\r\n\r\n//   type Employee = User | Manager;\r\n\r\n//   //Discriminated Unions\r\n//   // the two types must have a common property\r\n\r\n//   function checkEmployee(emp:Employee){\r\n//     switch(emp.role){\r\n//         case\"User\":\r\n//         console.log(\"This is a Normal user\")\r\n//         break\r\n\r\n//         case \"Admin\":\r\n//             console.log(\"This is an Admin\");\r\n//             return\r\n//     }\r\n//   }\r\n\r\n//   checkEmployee({name:'', age:23, role:\"User\"})\r\n\r\n//Type Casting\r\n\r\n// const p = document.querySelector('p')!\r\n\r\n// p.style.display=\"\"\r\n\r\n// const p1= <HTMLParagraphElement>document.querySelector('#message')!\r\n// //downside -React JS\r\n// // <> as an Element/Component\r\n\r\n// const inputText= document.querySelector('#text')\r\n\r\n// if(inputText){\r\n//     (inputText as HTMLInputElement).value\r\n// }\r\n\r\n// const btn = document.getElementById(\"btn\")! as HTMLButtonElement\r\n\r\n// btn.addEventListener('click',()=>{\r\n\r\n// })\r\n\r\n// indexing Property\r\n// {username:'username is taken'}\r\n// {username:'username is taken', email:'email is required'}\r\n\r\n// type ErrorContainer={\r\n//     [j:string]:string|number\r\n// }\r\n\r\n// let errors:ErrorContainer={\r\n//     username:'username is taken',\r\n//     email:'email is required'\r\n// }\r\n\r\n// let errors1:ErrorContainer={\r\n//     username:'username is taken'\r\n// }\r\n\r\n//function overloading\r\n\r\ntype StrNum = string | number;\r\n\r\nfunction add(a: string, b: string): string;\r\nfunction add(a: number, b: string): string;\r\nfunction add(a: string, b: number): string;\r\nfunction add(a: number, b: number): number;\r\nfunction add(a: StrNum, b: StrNum) {\r\n  if (typeof a === \"string\" || typeof b === \"string\") {\r\n    return a.toString() + b.toString();\r\n  }\r\n  return a + b;\r\n}\r\n\r\nvar result = add(13, 12);\r\n\r\n//optional chaining\r\n\r\nlet person = {\r\n  name: \"john\",\r\n  job: {\r\n    title: \"CEO\",\r\n  },\r\n};\r\n\r\nlet person1 = {\r\n    name: \"john\",\r\n    // job: {\r\n    //   title: \" \",\r\n    // },\r\n  };\r\n\r\n console.log( person1?.job?.title);\r\n\r\n\r\n //Nullish Coalescing\r\n//check if something is null or undefined\r\n\r\nlet username =null\r\n\r\nlet storedData= username ?? 'John Doe'\r\n\r\nconsole.log(storedData);\r\n\r\n\r\n \r\n\r\n\r\n"]}