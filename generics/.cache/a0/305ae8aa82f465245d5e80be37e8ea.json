{"id":"app.ts","dependencies":[{"name":"C:\\Users\\JonathanNdambuki\\package.json","includedInParent":true,"mtime":1708324969263}],"generated":{"js":"// I want to write a function that can take any datatype in typescript\n//without specifying all the types using union types(string|number)\nfunction createPerson() {\n  //you are getting the name value and the age value from diff places\n  var prs = {};\n  //partial make the properties optional\n  prs.name = \"John\";\n  prs.age = 30;\n  return prs;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"app.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"app.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"app.ts","name":null,"original":{"line":113,"column":0},"generated":{"line":3,"column":0}},{"source":"app.ts","name":null,"original":{"line":113,"column":9},"generated":{"line":3,"column":9}},{"source":"app.ts","name":null,"original":{"line":113,"column":21},"generated":{"line":3,"column":21}},{"source":"app.ts","name":null,"original":{"line":113,"column":21},"generated":{"line":3,"column":22}},{"source":"app.ts","name":null,"original":{"line":113,"column":21},"generated":{"line":3,"column":24}},{"source":"app.ts","name":null,"original":{"line":114,"column":4},"generated":{"line":4,"column":2}},{"source":"app.ts","name":null,"original":{"line":115,"column":4},"generated":{"line":5,"column":2}},{"source":"app.ts","name":null,"original":{"line":115,"column":8},"generated":{"line":5,"column":6}},{"source":"app.ts","name":null,"original":{"line":115,"column":11},"generated":{"line":5,"column":9}},{"source":"app.ts","name":null,"original":{"line":115,"column":28},"generated":{"line":5,"column":12}},{"source":"app.ts","name":null,"original":{"line":115,"column":28},"generated":{"line":5,"column":13}},{"source":"app.ts","name":null,"original":{"line":115,"column":30},"generated":{"line":5,"column":14}},{"source":"app.ts","name":null,"original":{"line":116,"column":4},"generated":{"line":6,"column":2}},{"source":"app.ts","name":null,"original":{"line":117,"column":4},"generated":{"line":7,"column":2}},{"source":"app.ts","name":null,"original":{"line":117,"column":7},"generated":{"line":7,"column":5}},{"source":"app.ts","name":null,"original":{"line":117,"column":8},"generated":{"line":7,"column":6}},{"source":"app.ts","name":null,"original":{"line":117,"column":12},"generated":{"line":7,"column":10}},{"source":"app.ts","name":null,"original":{"line":117,"column":13},"generated":{"line":7,"column":13}},{"source":"app.ts","name":null,"original":{"line":117,"column":19},"generated":{"line":7,"column":19}},{"source":"app.ts","name":null,"original":{"line":118,"column":4},"generated":{"line":8,"column":2}},{"source":"app.ts","name":null,"original":{"line":118,"column":7},"generated":{"line":8,"column":5}},{"source":"app.ts","name":null,"original":{"line":118,"column":8},"generated":{"line":8,"column":6}},{"source":"app.ts","name":null,"original":{"line":118,"column":11},"generated":{"line":8,"column":9}},{"source":"app.ts","name":null,"original":{"line":118,"column":12},"generated":{"line":8,"column":12}},{"source":"app.ts","name":null,"original":{"line":118,"column":14},"generated":{"line":8,"column":14}},{"source":"app.ts","name":null,"original":{"line":120,"column":4},"generated":{"line":9,"column":2}},{"source":"app.ts","name":null,"original":{"line":120,"column":11},"generated":{"line":9,"column":9}},{"source":"app.ts","name":null,"original":{"line":120,"column":24},"generated":{"line":9,"column":12}},{"source":"app.ts","name":null,"original":{"line":121,"column":0},"generated":{"line":10,"column":0}}],"sources":{"app.ts":"// I want to write a function that can take any datatype in typescript\r\n//without specifying all the types using union types(string|number)\r\n\r\n// function print<T>(x:T){\r\n//     console.log(x);\r\n// }\r\n\r\n// built in generics\r\n\r\n// let x:string[]=[]\r\n// let x:Array<string>=[]\r\n// let y:Array<number>=[]\r\n\r\n//Promise\r\n\r\n// let baseURL = \"https://jsonplaceholder.typicode.com/posts/1\";\r\n\r\n\r\n\r\n// function fetchData() {\r\n//   return new Promise<Post>((resolve, reject) => {\r\n//     fetch(baseURL)\r\n//       .then((response) => response.json())\r\n//       .then((data) => resolve(data))\r\n//       .catch((error) => reject(error));\r\n//   });\r\n// }\r\n\r\n// async function fetchData1(): Promise<Post> {\r\n//   let response = await fetch(baseURL);\r\n//   let posts = await response.json();\r\n//   return posts;\r\n// }\r\n\r\n// fetchData1().then((data) => {\r\n//   data.body;\r\n// });\r\n\r\n//generic is used on functions and classes\r\n\r\n\r\n// function print<T>(x:T){\r\n//     console.log(x);\r\n// }\r\n\r\n// print(1)\r\n// print(\"Hello\")\r\n// print({name:'John'})\r\n\r\n\r\n// function mergeObject<T extends object,U extends object>(obj1:T, obj2:U){\r\n//     return Object.assign(obj1,obj2)\r\n// }\r\n// ///object ---general\r\n\r\n// let result = mergeObject({name:\"John\", hobies:['']}, {age:30})\r\n// console.log(result.name);\r\n//  type Lengthy={\r\n//     length:number\r\n//  }\r\n\r\n// function count<T extends Lengthy>(x:T){\r\n//     if(x.length ===1){\r\n//         console.log(\"Contains one Element\");\r\n//     }\r\n//     else if(x.length>1){\r\n//         console.log(`It contain ${x.length} elements `); \r\n//     }\r\n// }\r\n\r\n// count(\"Hello\")\r\n// count([1,2,3,4,5,5,66,335,6,45,65])\r\n\r\n// function printsValue<T extends object, U extends keyof T>(x:T, key:U){\r\n//     console.log(x[key]);\r\n// }\r\n// printsValue({name:'john', age:20},\"name\")\r\n\r\n\r\n\r\n// class DataStore<T extends string|number|boolean>{\r\n\r\n//     data:T[]=[]\r\n\r\n//     addnewItem(item:T){\r\n//         this.data.push(item)\r\n//     }\r\n//     getData(){\r\n//         return [...this.data]\r\n//     }\r\n//     removeItem(item:T){\r\n//         this.data.splice(this.data.indexOf(item), 1)\r\n//     }\r\n// }\r\n\r\n// const st= new DataStore<string>()\r\n// st.addnewItem(\"John\")\r\n// console.log(st.getData());\r\n\r\n\r\n// const st1= new DataStore<number>()\r\n// st1.addnewItem(1)\r\n// console.log(st1.getData());\r\n\r\n\r\n\r\n\r\ninterface Person{\r\n    name:string\r\n    age:number\r\n}\r\n\r\nfunction createPerson():Person{\r\n    //you are getting the name value and the age value from diff places\r\n    let prs:Partial<Person>={}\r\n    //partial make the properties optional\r\n    prs.name=\"John\"\r\n    prs.age=30\r\n\r\n    return prs as Person\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"},"lineCount":null}},"error":null,"hash":"3d9b70094da8128577702294f1e21bce","cacheData":{"env":{}}}