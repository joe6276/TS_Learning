{"version":3,"sources":["app.ts"],"names":[],"mappings":"AAAA;AACA;AA+GA,SAAS,YAAY,CAAA,EAAA;EACjB;EACA,IAAI,GAAG,GAAiB,CAAA,CAAE;EAC1B;EACA,GAAG,CAAC,IAAI,GAAC,MAAM;EACf,GAAG,CAAC,GAAG,GAAC,EAAE;EAEV,OAAO,GAAa;AACxB","file":"app.c61986b1.js","sourceRoot":"..","sourcesContent":["// I want to write a function that can take any datatype in typescript\r\n//without specifying all the types using union types(string|number)\r\n\r\n// function print<T>(x:T){\r\n//     console.log(x);\r\n// }\r\n\r\n// built in generics\r\n\r\n// let x:string[]=[]\r\n// let x:Array<string>=[]\r\n// let y:Array<number>=[]\r\n\r\n//Promise\r\n\r\n// let baseURL = \"https://jsonplaceholder.typicode.com/posts/1\";\r\n\r\n\r\n\r\n// function fetchData() {\r\n//   return new Promise<Post>((resolve, reject) => {\r\n//     fetch(baseURL)\r\n//       .then((response) => response.json())\r\n//       .then((data) => resolve(data))\r\n//       .catch((error) => reject(error));\r\n//   });\r\n// }\r\n\r\n// async function fetchData1(): Promise<Post> {\r\n//   let response = await fetch(baseURL);\r\n//   let posts = await response.json();\r\n//   return posts;\r\n// }\r\n\r\n// fetchData1().then((data) => {\r\n//   data.body;\r\n// });\r\n\r\n//generic is used on functions and classes\r\n\r\n\r\n// function print<T>(x:T){\r\n//     console.log(x);\r\n// }\r\n\r\n// print(1)\r\n// print(\"Hello\")\r\n// print({name:'John'})\r\n\r\n\r\n// function mergeObject<T extends object,U extends object>(obj1:T, obj2:U){\r\n//     return Object.assign(obj1,obj2)\r\n// }\r\n// ///object ---general\r\n\r\n// let result = mergeObject({name:\"John\", hobies:['']}, {age:30})\r\n// console.log(result.name);\r\n//  type Lengthy={\r\n//     length:number\r\n//  }\r\n\r\n// function count<T extends Lengthy>(x:T){\r\n//     if(x.length ===1){\r\n//         console.log(\"Contains one Element\");\r\n//     }\r\n//     else if(x.length>1){\r\n//         console.log(`It contain ${x.length} elements `); \r\n//     }\r\n// }\r\n\r\n// count(\"Hello\")\r\n// count([1,2,3,4,5,5,66,335,6,45,65])\r\n\r\n// function printsValue<T extends object, U extends keyof T>(x:T, key:U){\r\n//     console.log(x[key]);\r\n// }\r\n// printsValue({name:'john', age:20},\"name\")\r\n\r\n\r\n\r\n// class DataStore<T extends string|number|boolean>{\r\n\r\n//     data:T[]=[]\r\n\r\n//     addnewItem(item:T){\r\n//         this.data.push(item)\r\n//     }\r\n//     getData(){\r\n//         return [...this.data]\r\n//     }\r\n//     removeItem(item:T){\r\n//         this.data.splice(this.data.indexOf(item), 1)\r\n//     }\r\n// }\r\n\r\n// const st= new DataStore<string>()\r\n// st.addnewItem(\"John\")\r\n// console.log(st.getData());\r\n\r\n\r\n// const st1= new DataStore<number>()\r\n// st1.addnewItem(1)\r\n// console.log(st1.getData());\r\n\r\n\r\n\r\n\r\ninterface Person{\r\n    name:string\r\n    age:number\r\n}\r\n\r\nfunction createPerson():Person{\r\n    //you are getting the name value and the age value from diff places\r\n    let prs:Partial<Person>={}\r\n    //partial make the properties optional\r\n    prs.name=\"John\"\r\n    prs.age=30\r\n\r\n    return prs as Person\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"]}